scalar DateTime


type Query {
  me: User
  apartment(id: ID!): Apartment
  apartments: [Apartment]!
  placesByApartmentId(apartmentId: ID!): [Place]!
  places: [Place]!
}

type Mutation {
  # Auth
  signup(email: String!, password: String!, name: String!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  # Apartment
  createApartment(name: String!, image: String): Apartment!
  updateApartment(id: ID!, name: String, image: String, placeIds: [String!]): Apartment!
  deleteApartment(id: ID!): Apartment
  # Place
  createPlace(apartmentId: ID!, name: String!, difficulty: Int!): Place!
  updatePlace(name: String, difficulty: Int): Place!
  deletePlace(id: ID!): Place
}

# Types

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  name: String!
  apartments: [Apartment]!
}

type AuthPayload {
  token: String!
  user: User!
}

type Tenant {
  id: ID!
  user: User!
  apartment: Apartment!
}


type Apartment {
  id: ID!
  user: User
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  image: String
  # owner: User!
  # tenants: [User]!
  places: [Place]!
  tenants: [Tenant!]
}

type Place {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  difficulty: Int!
  apartment: Apartment!
  # createdAt: DateTime!
  # updatedAt: DateTime!
  lastCleanedAt: DateTime
}

# Inputs
